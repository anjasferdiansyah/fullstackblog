// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  username      String? @unique
  name          String?
  password      String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  comments      Comment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {

  id            String    @id @default(cuid())
  slug          String @unique
  title         String
  img           String?
  Posts           Post[]
}

model Post {

  id            String    @id @default(cuid())
  createdAt     DateTime @default(now())
  slug          String @unique
  title         String
  desc          String
  img           String?
  views         Int      @default(0)
  catSlug       String
  cat           Category @relation(fields: [catSlug], references: [slug], onDelete: Cascade)
  userEmail     String
  user          User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  comments      Comment[]
  editorsPick   Boolean @default(false)
}

model Comment {
  id    String    @id @default(cuid())
  createdAt  DateTime @default(now())
  desc  String
  userEmail   String
  user      User @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  postSlug  String
  post      Post @relation(fields: [postSlug], references: [slug], onDelete: Cascade)
}
